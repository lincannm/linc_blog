<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lincannm 的小博客</title>
  
  <subtitle>Hello (≧∇≦)ﾉ</subtitle>
  <link href="https://blog.linc.work/atom.xml" rel="self"/>
  
  <link href="https://blog.linc.work/"/>
  <updated>2025-02-18T09:54:27.812Z</updated>
  <id>https://blog.linc.work/</id>
  
  <author>
    <name>Lincannm</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在已存在Windows的电脑（VMware环境）上安装Arch Linux（双系统）与KDE桌面环境</title>
    <link href="https://blog.linc.work/article/ad5e93bb.html"/>
    <id>https://blog.linc.work/article/ad5e93bb.html</id>
    <published>2025-02-12T14:51:26.000Z</published>
    <updated>2025-02-18T09:54:27.812Z</updated>
    
    <content type="html"><![CDATA[<p>想要装Windows + Arch Linux双系统，然而BIOS密码忘记了。。。。搞得我不能关安全启动（Secure Boot）安装双系统了。。。不过，即使是开了安全启动，一般来说也是有办法的嘛。。但是我试图用了支持安全启动的Ubuntu和Fedora， <strong><font size=4 color=red>傻逼联想BIOS</font></strong> 死活不能加载。为了记录好不容易学会的安装方法，只能在VMware上的一个已经装好Windows 11的虚拟机上操作一番，并于本文记录安装过程，万一以后想起密码了呢。。</p><p><strong>官方安装指南，多读多看：<a href="https://wiki.archlinuxcn.org/wiki/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97">安装指南 - Arch Linux 中文维基</a></strong></p><p>本文采取手动安装的方式，而不是<code>archinstall</code>的方式。</p><h2 id="Arch-Linux-安装"><a href="#Arch-Linux-安装" class="headerlink" title="Arch Linux 安装"></a>Arch Linux 安装</h2><h3 id="提前分区，并启动LiveCD"><a href="#提前分区，并启动LiveCD" class="headerlink" title="提前分区，并启动LiveCD"></a>提前分区，并启动LiveCD</h3><p>进入pe系统，在分区软件中给linux预留出足够的空间出来，成为一段未分配空间。记得给EFI分区分配至少200MB的空间，否则到后面GRUB引导会因为空间不足安装失败（安装后实占空间110MB）。</p><p>插上LiveCD，启动的时候从CD（实体机为USB设备）启动。</p><p><strong>看见这个界面，就能开始安装。</strong> 在完成安装之前，一切操作都在这里进行。</p><p><img src="/article/ad5e93bb/Windows11x64-2025-02-13-21-18-29.png" alt="Windows11x64-2025-02-13-21-18-29"></p><h4 id="验证引导模式"><a href="#验证引导模式" class="headerlink" title="验证引导模式"></a>验证引导模式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /sys/firmware/efi/fw_platform_size  <span class="comment"># UEFI_x64 == 64</span></span><br></pre></td></tr></table></figure><h3 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h3><p>VMware中不能配置wifi网络，只能以有线网络进行配置，而且默认已经能连上网络了，无需配置。因此，配置wifi网络的部分此处只能省略。</p><h3 id="配置系统时间"><a href="#配置系统时间" class="headerlink" title="配置系统时间"></a>配置系统时间</h3><p><a href="https://man.archlinux.org/man/timedatectl.1">timedatectl(1) — Arch manual pages</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">timedatectl  <span class="comment"># 可查看当前系统时间</span></span><br><span class="line">timedatectl set-timezone Asia/Shanghai  <span class="comment"># 配置时区为上海</span></span><br></pre></td></tr></table></figure><h3 id="硬盘分区"><a href="#硬盘分区" class="headerlink" title="硬盘分区"></a>硬盘分区</h3><h4 id="创建分区"><a href="#创建分区" class="headerlink" title="创建分区"></a>创建分区</h4><p>使用cfdisk进行硬盘分区，方便一点。</p><p><a href="https://wiki.archlinuxcn.org/wiki/Cfdisk">cfdisk - Arch Linux 中文维基</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l  <span class="comment"># 查看当前硬盘设备及分区</span></span><br><span class="line">cfdisk /dev/nvme0n1  <span class="comment"># 对/dev/nvme0n1这个硬盘进行分区</span></span><br></pre></td></tr></table></figure><p><img src="/article/ad5e93bb/image-20250213160922596.png" alt="image-20250213160922596"></p><p>EFI分区已存在，只要创建个<strong>swap分区</strong>和<strong>根目录分区</strong>即可。</p><h4 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 /dev/&lt;根分区&gt;</span><br><span class="line">mkswap /dev/&lt;swap分区&gt;</span><br></pre></td></tr></table></figure><h4 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h4><blockquote><p>根据官方文档，挂载分区一定要遵循顺序，先挂载根（root）分区（到 <code>/mnt</code>），再挂载引导（boot）分区（到 <code>/mnt/boot</code> ），最后再挂载其他分区。否则可能遇到安装完成后无法启动系统的问题。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/&lt;根分区&gt; /mnt  <span class="comment"># 先把根分区挂载到/mnt</span></span><br><span class="line">mount --<span class="built_in">mkdir</span> /dev/&lt;EFI分区&gt; /mnt/boot  <span class="comment"># 再把EFI分区挂载到/mnt/boot</span></span><br><span class="line">swapon /dev/&lt;swap分区&gt;  <span class="comment"># 启用swap分区</span></span><br></pre></td></tr></table></figure><h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><h4 id="安装基本系统"><a href="#安装基本系统" class="headerlink" title="安装基本系统"></a>安装基本系统</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/pacman.d/mirrorlist  <span class="comment"># 编辑源为国内镜像源</span></span><br><span class="line">pacman -Sy archlinux-keyring  <span class="comment"># 更新keyring</span></span><br><span class="line">pacstrap -K /mnt base linux linux-firmware vim networkmanager  <span class="comment"># 向硬盘安装base软件包、linux内核、linux固件 与 vim、网络管理器</span></span><br><span class="line">genfstab -U /mnt &gt; /mnt/etc/fstab  <span class="comment"># 向已安装的新系统生成fstab</span></span><br></pre></td></tr></table></figure><p><code>linux-firmware</code>在虚拟机可以不用安装。<code>vim</code>和<code>networkmanager</code>是附加的，方便后续编辑文本和配置网络。</p><p>生成的<code>fstab</code>文件用于定义在系统启动时自动挂载的文件系统。</p><h4 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arch-chroot /mnt  <span class="comment"># chroot到新安装的系统</span></span><br><span class="line"><span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime  <span class="comment"># 设置时区</span></span><br><span class="line">hwclock --systohc  <span class="comment"># 生成 /etc/adjtime</span></span><br></pre></td></tr></table></figure><h5 id="本地化设置"><a href="#本地化设置" class="headerlink" title="本地化设置"></a>本地化设置</h5><p><strong>编辑 <code>/etc/locale.gen</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/locale.gen</span><br></pre></td></tr></table></figure><p>然后取消掉 <code>en_US.UTF-8 UTF-8</code>的注释，接着执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locale-gen</span><br></pre></td></tr></table></figure><p><strong>编辑<code>/etc/locale.conf</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/locale.conf</span><br></pre></td></tr></table></figure><p>然后设置LANG变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure><p><strong>编辑<code>/etc/hostname</code></strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hostname</span><br></pre></td></tr></table></figure><p>之后写入主机名。</p><h5 id="设置root密码"><a href="#设置root密码" class="headerlink" title="设置root密码"></a>设置root密码</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><h5 id="安装GRUB引导"><a href="#安装GRUB引导" class="headerlink" title="安装GRUB引导"></a>安装GRUB引导</h5><p>没有grub，就引导不了我们的archlinux。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -Sy grub efibootmgr os-prober  <span class="comment"># os-prober用来探测别的操作系统</span></span><br></pre></td></tr></table></figure><p>为了使用os-proper来探测我们的Windows系统，编辑<code>/etc/default/grub</code>并取消下面这一行的注释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_DISABLE_OS_PROBER=false</span><br></pre></td></tr></table></figure><p>安装GRUB：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot  <span class="comment"># 把grub安装到efi分区</span></span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg  <span class="comment"># 生成grub.cfg配置文件</span></span><br></pre></td></tr></table></figure><p><strong>整个ArchLinux到此安装完毕。</strong> 输入<code>exit</code>退出chroot环境，输入<code>reboot</code>启动！</p><h2 id="安装后基本配置"><a href="#安装后基本配置" class="headerlink" title="安装后基本配置"></a>安装后基本配置</h2><h3 id="配置网络-1"><a href="#配置网络-1" class="headerlink" title="配置网络"></a>配置网络</h3><p>由于是在虚拟机下安装的，此处按照有线网络来配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip <span class="built_in">link</span>  <span class="comment">#查看网络设备</span></span><br></pre></td></tr></table></figure><p><img src="/article/ad5e93bb/image-20250213180618669.png" alt="image-20250213180618669"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> dev ens160 up  <span class="comment">#  启动设备ens160</span></span><br></pre></td></tr></table></figure><p>网络管理器有以下几种：</p><p><img src="/article/ad5e93bb/image-20250213205335987.png" alt="image-20250213205335987"></p><p>使用<code>NetworkManager</code>这个网络管理器配置网络，毕竟有<code>nmtui</code>这个工具方便点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now NetworkManager  <span class="comment"># 设置NetworkManager开机自启并立即启动</span></span><br><span class="line">nmtui  <span class="comment"># 启动命令行UI</span></span><br></pre></td></tr></table></figure><p><img src="/article/ad5e93bb/image-20250213181038411.png" alt="image-20250213181038411"></p><p><img src="/article/ad5e93bb/image-20250215222916007.png" alt="image-20250215222916007"></p><p>选中ens33按enter取消连接（自动消失可还行），下面的有线连接1自动激活。</p><p><img src="/article/ad5e93bb/image-20250213181612633.png" alt="image-20250213181612633"></p><p>这样确保它启用了（前面有个星号，右边按钮是Deactivate按钮），然后就可以连接互联网了。可以<code>ping baidu.com</code>试试看。</p><p>其实主要还是因为一开始没有DHCP自动获取ip，而<code>NetworkManager</code>刚好内置这个服务，获取ip成功后就能上网了。只安装<code>dhcpcd</code>这个DHCP服务其实也是一样的效果，也能上网。</p><h3 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pacman -Sy <span class="built_in">sudo</span>  <span class="comment"># 安装sudo，这玩意不自带</span></span><br><span class="line">useradd -m -G wheel linc  <span class="comment"># 创建用户，名字为linc，创建用户主目录，且用户属于wheel用户组（可以用sudo）</span></span><br><span class="line">passwd linc  <span class="comment"># 设置密码</span></span><br></pre></td></tr></table></figure><p>编辑<code>/etc/sudoers</code>文件，取消这行注释，以启用wheel用户组：</p><p><img src="/article/ad5e93bb/image-20250213182831376.png" alt="image-20250213182831376"></p><h3 id="安装SSH"><a href="#安装SSH" class="headerlink" title="安装SSH"></a>安装SSH</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacman -Sy openssh</span><br><span class="line">systemctl <span class="built_in">enable</span> --now sshd</span><br></pre></td></tr></table></figure><p>编辑<code>/stc/ssh/sshd_config</code>，添加<code>PermitRootLogin yes</code>（取消注释并修改），以允许通过ssh登录root用户。</p><p><img src="/article/ad5e93bb/image-20250213205027737.png" alt="image-20250213205027737"></p><p>使用<code>systemctl restart sshd</code>让配置生效</p><h3 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -Sy zsh zsh-completions</span><br></pre></td></tr></table></figure><p>编辑<code>~/.zshrc</code>，简单配置如下（参考的是ArchWiki的配置）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">autoload</span> -Uz compinit promptinit</span><br><span class="line">compinit</span><br><span class="line">promptinit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将默认命令行提示设置为 walters 主题</span></span><br><span class="line">prompt walters</span><br></pre></td></tr></table></figure><p>执行<code>source ~/.zshrc</code>生效。</p><h2 id="安装KDE"><a href="#安装KDE" class="headerlink" title="安装KDE"></a>安装KDE</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacman -Sy plasma kde-applications  <span class="comment"># 安装plasma6和其配套软件</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now sddm  <span class="comment"># 设置sddm自启动并启动sddm显示管理器 </span></span><br></pre></td></tr></table></figure><p>VMware需要安装open-vm-tools（参考：<a href="https://wiki.archlinuxcn.org/wiki/VMware/%E5%AE%89%E8%A3%85_Arch_Linux_%E4%B8%BA%E8%99%9A%E6%8B%9F%E6%9C%BA">VMware&#x2F;安装 Arch Linux 为虚拟机 - Arch Linux 中文维基</a>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -Sy open-vm-tools</span><br><span class="line"><span class="comment"># 安装完要开启两个服务：vmtoolsd 和 vmware-vmblock-fuse</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now vmtoolsd</span><br><span class="line">systemctl <span class="built_in">enable</span> --now vmware-vmblock-fuse</span><br></pre></td></tr></table></figure><p><img src="/article/ad5e93bb/Windows11x64-2025-02-13-20-57-22.png" alt="Windows11x64-2025-02-13-20-57-22"></p><p><img src="/article/ad5e93bb/Windows11x64-2025-02-13-21-15-36.png" alt="Windows11x64-2025-02-13-21-15-36"></p><h3 id="中文化"><a href="#中文化" class="headerlink" title="中文化"></a>中文化</h3><ol><li><p>去kde的设置，切换语言为中文简体，之后会提示重启系统，字体还没装先不重启。</p></li><li><p>安装思源黑体，不然显示不了中文：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -Sy adobe-source-han-sans-cn-fonts</span><br></pre></td></tr></table></figure></li><li><p>重启系统就好了。</p></li></ol><h2 id="解决问题（在VMware下）"><a href="#解决问题（在VMware下）" class="headerlink" title="解决问题（在VMware下）"></a>解决问题（在VMware下）</h2><h3 id="声音极其卡顿"><a href="#声音极其卡顿" class="headerlink" title="声音极其卡顿"></a>声音极其卡顿</h3><p>在我的虚拟机上，声音卡的一笔。。尝试了几个解决办法，把自带的pipewire换成pulseaudio可以解决。然而直接安装pulseaudio会提示与pipewire冲突：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[linc@VM ~]$ <span class="built_in">sudo</span> pacman -Sy pulseaudio</span><br><span class="line">:: Synchronizing package databases...</span><br><span class="line"> core is up to <span class="built_in">date</span></span><br><span class="line"> extra              extra is up to <span class="built_in">date</span></span><br><span class="line">                                       resolving dependencies...</span><br><span class="line">looking <span class="keyword">for</span> conflicting packages...</span><br><span class="line">:: pulseaudio-17.0+r43+g3e2bb8a1e-1 and pipewire-pulse-1:1.2.7-1 are <span class="keyword">in</span> conflict. Remove pipewire-pulse? [y/N] y</span><br><span class="line">error: failed to prepare transaction (could not satisfy dependencies)</span><br><span class="line">:: removing pipewire-pulse breaks dependency <span class="string">&#x27;pipewire-pulse&#x27;</span> required by pulse-native-provider</span><br></pre></td></tr></table></figure><p>所以需要卸载pipewire：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -Rdd pipewire-pulse</span><br></pre></td></tr></table></figure><p>安装pulseaudio（和pulseaudio-alsa）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -Sy pulseaudio pulseaudio-alsa</span><br></pre></td></tr></table></figure><p>重启，ok。</p><p>然而过一段时间声音又发不出来了。。因此需要禁用 PulseAudio 的自动挂起功能：</p><p>编辑 PulseAudio 的配置文件<code>/etc/pulse/default.pa</code>，找到这一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load-module module-suspend-on-idle</span><br></pre></td></tr></table></figure><p>用<code>#</code>注释掉，重启就行。</p>]]></content>
    
    
    <summary type="html">想要装Windows + Arch Linux双系统，然而BIOS密码忘记了。。。。搞得我不能关安全启动（Secure Boot）安装双系统了。。。不过，即使是开了安全启动，一般来说也是有办法的嘛。。但是我试图用了支持安全启动的Ubuntu和Fedora，傻逼联想BIOS死活不能加载。为了记录好不容易学会的安装方法，只能在VMware上的一个已经装好Windows 11的虚拟机上操作一番，并于本文记录安装过程，万一以后想起密码了呢。。</summary>
    
    
    
    <category term="Linux" scheme="https://blog.linc.work/categories/Linux/"/>
    
    <category term="笔记" scheme="https://blog.linc.work/categories/Linux/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Linux" scheme="https://blog.linc.work/tags/Linux/"/>
    
    <category term="Arch Linux" scheme="https://blog.linc.work/tags/Arch-Linux/"/>
    
    <category term="双系统" scheme="https://blog.linc.work/tags/%E5%8F%8C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="KDE" scheme="https://blog.linc.work/tags/KDE/"/>
    
    <category term="笔记" scheme="https://blog.linc.work/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>如何在WSL的Ubuntu 24.04上通过VcXsrv使用Xfce桌面</title>
    <link href="https://blog.linc.work/article/b54c182.html"/>
    <id>https://blog.linc.work/article/b54c182.html</id>
    <published>2025-02-08T14:45:16.000Z</published>
    <updated>2025-02-18T09:54:27.813Z</updated>
    
    <content type="html"><![CDATA[<p>感觉在VMware上用Ubuntu的图形界面太卡了，所以就用上WSL（介绍：<a href="https://learn.microsoft.com/zh-cn/windows/wsl/about">什么是适用于 Linux 的 Windows 子系统 | Microsoft Learn</a>）了。通过xrdp连接Gnome和KDE桌面都挺卡，使用X11协议（通过VcXsrv）则不会有太大卡顿。然而可惜KDE在VcXsrv上会有显示问题，怎么也未能解决，只能用Xfce桌面了。网上现有的资料都是用VcXsrv显示Xfce桌面，也不知道为什么不提提别的桌面，别的桌面（如KDE）有问题也稍微提一嘴啊。。</p><h2 id="安装WSL，安装Ubuntu-24-04"><a href="#安装WSL，安装Ubuntu-24-04" class="headerlink" title="安装WSL，安装Ubuntu 24.04"></a>安装WSL，安装Ubuntu 24.04</h2><p>此处不多说，自行看官方文档。</p><p><a href="https://learn.microsoft.com/zh-cn/windows/wsl/install">安装 WSL | Microsoft Learn</a></p><h2 id="网络模式设置为Mirrored"><a href="#网络模式设置为Mirrored" class="headerlink" title="网络模式设置为Mirrored"></a>网络模式设置为Mirrored</h2><p>打开WSL Settings，来到网络页面，网络模式改成Mirrored（桥接），否则不能跟VcXsrv建立连接。改完别忘了<code>wsl --shutdown</code>。</p><p><img src="/article/b54c182/image-20250208231435515.png" alt="image-20250208231435515"></p><h2 id="VcXsrv"><a href="#VcXsrv" class="headerlink" title="VcXsrv"></a>VcXsrv</h2><p>电脑上可以用Xming或VcXsrv来通过X11协议使用桌面，不过Xming就坑爹了，<strong>2025年</strong>更新的最新版本却需要捐助才能下载，免费下载的版本竟停留在<strong>2007年</strong>。07年的版本实测会卡死，还是用免费开源的VcXsrv吧！听说WSL微软推荐使用VcXsrv，但我暂时没有在官方文档看见这样的描述。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在这里下载：<a href="https://github.com/marchaesen/vcxsrv/releases">Releases · marchaesen&#x2F;vcxsrv</a></p><p>安装完后不知为何不会显示在开始菜单上的应用程序列表上，只会在桌面建立一个快捷方式。点击这个快捷方式启动就好。</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ol><li>选择One large window</li></ol><p><img src="/article/b54c182/image-20250208225858341.png" alt="image-20250208225858341"></p><ol start="2"><li>默认</li></ol><p><img src="/article/b54c182/image-20250208225925780.png" alt="image-20250208225925780"></p><ol start="3"><li>勾选Disable access control</li></ol><p><img src="/article/b54c182/image-20250208230010057.png" alt="image-20250208230010057"></p><ol start="4"><li>完成</li></ol><p><img src="/article/b54c182/image-20250208230100191.png" alt="image-20250208230100191"></p><p><img src="/article/b54c182/image-20250208230119190.png" alt="image-20250208230119190"></p><h2 id="Xfce"><a href="#Xfce" class="headerlink" title="Xfce"></a>Xfce</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install -y xfce4 xorg <span class="comment"># 安装Xfce和xorg</span></span><br></pre></td></tr></table></figure><h3 id="2-设置DISPLAY环境变量（关键）"><a href="#2-设置DISPLAY环境变量（关键）" class="headerlink" title="2. 设置DISPLAY环境变量（关键）"></a>2. 设置DISPLAY环境变量（关键）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim .bashrc</span><br></pre></td></tr></table></figure><p>在最后一行写上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> DISPLAY=localhost:0</span><br></pre></td></tr></table></figure><p>使<code>.bashrc</code>生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>这样就行。有资料说要依照<code>/etc/resolf.conf</code>的<code>nameserver</code>的ip进行设置，试了一下无效。我又设置成<code>:0.0</code>，VcXsrv不会显示画面。搞了不知道多久了，自己试了下<code>localhost</code>，竟然ok了。。。</p><h3 id="3-启动Xfce"><a href="#3-启动Xfce" class="headerlink" title="3. 启动Xfce"></a>3. 启动Xfce</h3><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> startxfce4</span><br></pre></td></tr></table></figure><p>回到VcXsrv，xfce就有了！</p><p><img src="/article/b54c182/image-20250208232121183.png" alt="image-20250208232121183"></p><p>可以执行<code>sudo startxfce4 &amp;</code>让他后台执行。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如果用KDE桌面并用<code>startplasma-x11</code>启动的话，看起来会变这样（已经进入桌面）：</p><p><img src="/article/b54c182/dd480271e78d109395329c3e3ec7f6fa.png" alt="dd480271e78d109395329c3e3ec7f6fa"></p><p>窗口会被这一坨黑挡住。什么破玩意。。</p><p>只能用Xfce了，然而以前在Termux早把Xfce玩惯了。还是回到VMware吧！</p><p>（Gnome桌面并没有测试，因为懒）</p>]]></content>
    
    
    <summary type="html">感觉在VMware上用Ubuntu的图形界面太卡了，所以就用上WSL了。通过xrdp连接Gnome和KDE桌面都挺卡，使用X11协议（通过VcXsrv）则不会有太大卡顿。然而可惜KDE在VcXsrv上会有显示问题，怎么也未能解决，只能用Xfce桌面了。网上现有的资料都是用VcXsrv显示Xfce桌面，也不知道为什么不提提别的桌面，别的桌面（如KDE）有问题也稍微提一嘴啊。。</summary>
    
    
    
    <category term="Linux" scheme="https://blog.linc.work/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://blog.linc.work/tags/Linux/"/>
    
    <category term="WSL" scheme="https://blog.linc.work/tags/WSL/"/>
    
    <category term="Ubuntu" scheme="https://blog.linc.work/tags/Ubuntu/"/>
    
    <category term="Xfce" scheme="https://blog.linc.work/tags/Xfce/"/>
    
  </entry>
  
  <entry>
    <title>解决Hexo+Typora引用图片不方便问题</title>
    <link href="https://blog.linc.work/article/f83728a5.html"/>
    <id>https://blog.linc.work/article/f83728a5.html</id>
    <published>2025-02-06T14:51:05.000Z</published>
    <updated>2025-02-18T09:54:27.814Z</updated>
    
    <content type="html"><![CDATA[<p><strong>参考：<a href="https://www.jianshu.com/p/bbbcbb7c4911">hexo+typora+github图片路径问题 - 简书</a></strong></p><p>参照 <a href="https://hexo.io/zh-cn/docs/asset-folders">资源文件夹 | Hexo</a> 对<code>_config.yml</code>进行如下设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>Typora进行如下设置：</p><p><img src="/article/f83728a5/image-20250206231738278.png" alt="image-20250206231738278"></p><p>然而在typora粘贴图片后，typora可以渲染，hexo由于路径问题，渲染失败。</p><p><img src="/article/f83728a5/image-20250206232249899.png" alt="image-20250206232249899"></p><p><img src="/article/f83728a5/image-20250206232116558.png" alt="image-20250206232116558"></p><p>在typora中，图片路径为<code>测试文章/001.png</code>；而在hexo的网页上，图片路径被渲染为<code>http://localhost:4000/测试文章/001.png</code>。而只有在typora中把图片路径写作<code>001.png</code>，才能在网页中被正确渲染为<code>http://localhost:4000/2025/02/06/测试文章/001.png</code>。但这样的话，typora不就因为文件路径不存在而无法显示图片了吗？</p><p>查了点资料，只能手动修改<code>hexo-render-marked</code>模块的<code>renderer.js</code>了。在以下位置添加代码：</p><p><img src="/article/f83728a5/image-20250206233108872.png" alt="image-20250206233108872"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(href.<span class="title function_">indexOf</span>(<span class="string">&quot;/&quot;</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">href=href.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题解决。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;参考：&lt;a href=&quot;https://www.jianshu.com/p/bbbcbb7c4911&quot;&gt;hexo+typora+github图片路径问题 - 简书&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;参照 &lt;a href=&quot;https://hexo.io</summary>
      
    
    
    
    <category term="Hexo" scheme="https://blog.linc.work/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://blog.linc.work/tags/Hexo/"/>
    
    <category term="Typora" scheme="https://blog.linc.work/tags/Typora/"/>
    
  </entry>
  
  <entry>
    <title>在780M核显笔记本上通过LM Studio本地化部署DeepSeek大模型</title>
    <link href="https://blog.linc.work/article/c73044ca.html"/>
    <id>https://blog.linc.work/article/c73044ca.html</id>
    <published>2025-02-01T12:30:30.000Z</published>
    <updated>2025-02-18T09:54:27.808Z</updated>
    
    <content type="html"><![CDATA[<p>本来想用Ollama部署LLM，但我下载启动Ollama后发现官方不支持我的Radeon 780M核显（gfx1103）：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">lincannm</span>&gt;<span class="title">ollama</span> <span class="title">serve</span></span></span><br><span class="line"><span class="function">2025/02/01 18:01:29 <span class="title">routes.go</span>:1187: <span class="title">INFO</span> <span class="title">server</span> <span class="title">config</span> <span class="title">env</span>=&quot;<span class="title">map</span>[<span class="title">CUDA_VISIBLE_DEVICES</span>: <span class="title">GPU_DEVICE_ORDINAL</span>: <span class="title">HIP_VISIBLE_DEVICES</span>: <span class="title">HSA_OVERRIDE_GFX_VERSION</span>: <span class="title">HTTPS_PROXY</span>: <span class="title">HTTP_PROXY</span>: <span class="title">NO_PROXY</span>: <span class="title">OLLAMA_DEBUG:false</span> <span class="title">OLLAMA_FLASH_ATTENTION:false</span> <span class="title">OLLAMA_GPU_OVERHEAD</span>:0 <span class="title">OLLAMA_HOST:http</span>://127.0.0.1:11434 <span class="title">OLLAMA_INTEL_GPU:false</span> <span class="title">OLLAMA_KEEP_ALIVE</span>:5<span class="title">m0s</span> <span class="title">OLLAMA_KV_CACHE_TYPE</span>: <span class="title">OLLAMA_LLM_LIBRARY</span>: <span class="title">OLLAMA_LOAD_TIMEOUT</span>:5<span class="title">m0s</span> <span class="title">OLLAMA_MAX_LOADED_MODELS</span>:0 <span class="title">OLLAMA_MAX_QUEUE</span>:512 <span class="title">OLLAMA_MODELS:C</span>:\\<span class="title">Users</span>\\<span class="title">lincannm</span>\\.<span class="title">ollama</span>\\<span class="title">models</span> <span class="title">OLLAMA_MULTIUSER_CACHE:false</span> <span class="title">OLLAMA_NOHISTORY:false</span> <span class="title">OLLAMA_NOPRUNE:false</span> <span class="title">OLLAMA_NUM_PARALLEL</span>:0 <span class="title">OLLAMA_ORIGINS</span>:[<span class="title">http</span>://<span class="title">localhost</span> <span class="title">https</span>://<span class="title">localhost</span> <span class="title">http</span>://<span class="title">localhost</span>:* <span class="title">https</span>://<span class="title">localhost</span>:* <span class="title">http</span>://127.0.0.1 <span class="title">https</span>://127.0.0.1 <span class="title">http</span>://127.0.0.1:* <span class="title">https</span>://127.0.0.1:* <span class="title">http</span>://0.0.0.0 <span class="title">https</span>://0.0.0.0 <span class="title">http</span>://0.0.0.0:* <span class="title">https</span>://0.0.0.0:* <span class="title">app</span>://* <span class="title">file</span>://* <span class="title">tauri</span>://* <span class="title">vscode</span>-<span class="title">webview</span>://*] <span class="title">OLLAMA_SCHED_SPREAD:false</span> <span class="title">ROCR_VISIBLE_DEVICES</span>:]&quot;</span></span><br><span class="line"><span class="function"><span class="title">time</span>=2025-02-01<span class="title">T18</span>:01:29.821+08:00 <span class="title">level</span>=<span class="title">INFO</span> <span class="title">source</span>=<span class="title">images.go</span>:432 <span class="title">msg</span>=&quot;<span class="title">total</span> <span class="title">blobs</span>: 0&quot;</span></span><br><span class="line"><span class="function"><span class="title">time</span>=2025-02-01<span class="title">T18</span>:01:29.822+08:00 <span class="title">level</span>=<span class="title">INFO</span> <span class="title">source</span>=<span class="title">images.go</span>:439 <span class="title">msg</span>=&quot;<span class="title">total</span> <span class="title">unused</span> <span class="title">blobs</span> <span class="title">removed</span>: 0&quot;</span></span><br><span class="line"><span class="function"><span class="title">time</span>=2025-02-01<span class="title">T18</span>:01:29.823+08:00 <span class="title">level</span>=<span class="title">INFO</span> <span class="title">source</span>=<span class="title">routes.go</span>:1238 <span class="title">msg</span>=&quot;<span class="title">Listening</span> <span class="title">on</span> 127.0.0.1:11434 (<span class="title">version</span> 0.5.7)&quot;</span></span><br><span class="line"><span class="function"><span class="title">time</span>=2025-02-01<span class="title">T18</span>:01:29.825+08:00 <span class="title">level</span>=<span class="title">INFO</span> <span class="title">source</span>=<span class="title">routes.go</span>:1267 <span class="title">msg</span>=&quot;<span class="title">Dynamic</span> <span class="title">LLM</span> <span class="title">libraries</span>&quot; <span class="title">runners</span>=&quot;[<span class="title">cuda_v12_avx</span> <span class="title">rocm_avx</span> <span class="title">cpu</span> <span class="title">cpu_avx</span> <span class="title">cpu_avx2</span> <span class="title">cuda_v11_avx</span>]&quot;</span></span><br><span class="line"><span class="function"><span class="title">time</span>=2025-02-01<span class="title">T18</span>:01:29.825+08:00 <span class="title">level</span>=<span class="title">INFO</span> <span class="title">source</span>=<span class="title">gpu.go</span>:226 <span class="title">msg</span>=&quot;<span class="title">looking</span> <span class="title">for</span> <span class="title">compatible</span> <span class="title">GPUs</span>&quot;</span></span><br><span class="line"><span class="function"><span class="title">time</span>=2025-02-01<span class="title">T18</span>:01:29.825+08:00 <span class="title">level</span>=<span class="title">INFO</span> <span class="title">source</span>=<span class="title">gpu_windows.go</span>:167 <span class="title">msg</span>=<span class="title">packages</span> <span class="title">count</span>=1</span></span><br><span class="line"><span class="function"><span class="title">time</span>=2025-02-01<span class="title">T18</span>:01:29.825+08:00 <span class="title">level</span>=<span class="title">INFO</span> <span class="title">source</span>=<span class="title">gpu_windows.go</span>:214 <span class="title">msg</span>=&quot;&quot; <span class="title">package</span>=0 <span class="title">cores</span>=8 <span class="title">efficiency</span>=0 <span class="title">threads</span>=16</span></span><br><span class="line"><span class="function"><span class="title">time</span>=2025-02-01<span class="title">T18</span>:01:30.397+08:00 <span class="title">level</span>=<span class="title">WARN</span> <span class="title">source</span>=<span class="title">amd_windows.go</span>:140 <span class="title">msg</span>=&quot;<span class="title">amdgpu</span> <span class="title">is</span> <span class="title">not</span> <span class="title">supported</span> (<span class="title">supported</span> <span class="title">types</span>:[<span class="title">gfx1030</span> <span class="title">gfx1100</span> <span class="title">gfx1101</span> <span class="title">gfx1102</span> <span class="title">gfx906</span>])&quot; <span class="title">gpu_type</span>=<span class="title">gfx1103</span> <span class="title">gpu</span>=0 <span class="title">library</span>=<span class="title">C</span>:\<span class="title">Users</span>\<span class="title">lincannm</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Ollama</span>\<span class="title">lib</span>\<span class="title">ollama</span></span></span><br><span class="line"><span class="function"><span class="title">time</span>=2025-02-01<span class="title">T18</span>:01:30.400+08:00 <span class="title">level</span>=<span class="title">INFO</span> <span class="title">source</span>=<span class="title">gpu.go</span>:392 <span class="title">msg</span>=&quot;<span class="title">no</span> <span class="title">compatible</span> <span class="title">GPUs</span> <span class="title">were</span> <span class="title">discovered</span>&quot;</span></span><br><span class="line"><span class="function"><span class="title">time</span>=2025-02-01<span class="title">T18</span>:01:30.400+08:00 <span class="title">level</span>=<span class="title">INFO</span> <span class="title">source</span>=<span class="title">types.go</span>:131 <span class="title">msg</span>=&quot;<span class="title">inference</span> <span class="title">compute</span>&quot; <span class="title">id</span>=0 <span class="title">library</span>=<span class="title">cpu</span> <span class="title">variant</span>=<span class="title">avx2</span> <span class="title">compute</span>=&quot;&quot; <span class="title">driver</span>=0.0 <span class="title">name</span>=&quot;&quot; <span class="title">total</span>=&quot;27.8 <span class="title">GiB</span>&quot; <span class="title">available</span>=&quot;20.3 <span class="title">GiB</span>&quot;</span></span><br></pre></td></tr></table></figure><p>听说还有个叫做LM Studio的东西，对我这样的780M核显支持不错，可以直接用。而且Ollama是命令行使用，而LM Studio则是GUI操作，更加人性化。</p><h1 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h1><p>LM Studio官网：<a href="https://lmstudio.ai/">https://lmstudio.ai/</a></p><p>下载它：<img src="/images/image-20250201185052113.png" alt="image-20250201185052113"></p><p>安装就不必多说了吧。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>点开侧边栏第四个图标，弹出此“发现”窗口。首先到这里看看，由于我的GPU是AMD Radeon 780M，在这里看看确保选中了Vulkan选项，这样运行LLM的时候才会调用到显卡。</p><p><img src="/images/184348.png" alt="184348"></p><p>App Settings可以设置界面为中文。</p><p><img src="/images/184421.png" alt="184421"></p><p>到“Model Search”下载DeekSeek模型。由于我的显存只有可怜的4G，我就下载大小为4G左右的7B版本就好。</p><p><img src="/images/184330.png" alt="184330"></p><p>下载完成！回到聊天界面，到顶栏选择模型。</p><p><img src="/images/image-20250201185827964.png" alt="image-20250201185827964"></p><p>根据电脑配置配置这些配置~（GPU Offload被译为GPU卸载有点别扭，网上查了一下，其实就是根据当前GPU的显存性能来调节线条，值越高，就意味着运行模型的性能占比交给GPU的更高）</p><p><img src="/images/185910.png" alt="185910"></p><p>点一下加载模型就加载好了。<strong>部署到此结束，整个过程都非常简单</strong>。</p><p>开始聊天，思考过程中笔记本风扇直接起飞。</p><p><img src="/images/190340.png" alt="190340"></p><p><img src="/images/190354.png" alt="190354"></p><p>回复太人机了，完整版DeepSeek会跟我解析这段话的幽默性。这样也很正常，完整版671B，我才7B的模型根本比不了。</p><h2 id="网络优化"><a href="#网络优化" class="headerlink" title="网络优化"></a>网络优化</h2><p>我是翻墙出去下载的模型，如果没有翻墙条件的话可以打开LM Studio安装目录，用vscode把目录下所有文件做全局替换——把所有<code>huggingface.co</code>替换为<code>hf-mirror.com</code>即可。</p><p><img src="/images/204918.png" alt="204918"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>不知道为什么我的核显占用很小，几乎闲着，而且一把GPU Offload调大就报Unknown error。。。全网找不到解决办法。</p><hr><p>后来我下载了14B的模型，终于懂得解析幽默性了，这下就聪明多了。但是我让它用贴吧语气锐评ChatGPT，依旧不聪明，甚至都不知道是在骂ChatGPT还是在骂我。。。</p><p><img src="/images/224543.png" alt="224543"></p><p><img src="/images/224750.png" alt="224750"></p><hr><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>核显占用小的问题解决了！搞了两天原来更新一下amd显卡驱动就好了。。。更新了之后，GPU Offload可以全部拉满，可以全部交给显卡计算了。</p><p><img src="/images/223858.png" alt="223858"></p><h2 id="Ollama-for-amd"><a href="#Ollama-for-amd" class="headerlink" title="Ollama-for-amd"></a>Ollama-for-amd</h2><p>在那个问题解决之前，试了一下<strong>Ollama-for-amd</strong>项目（<a href="https://github.com/likelovewant/ollama-for-amd/">https://github.com/likelovewant/ollama-for-amd/</a>），该项目针对amd显卡进行支持性扩展，通过这个项目我的780M也能跑ollama了。安装的话直接下载Release里面的exe就行了。</p><p>然而聊天会有bug，不仅没有深度思考过程，后面我每说一句它还只会直接接我的话。不过既然问题解决了，干脆接着用LMStudio算了吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本来想用Ollama部署LLM，但我下载启动Ollama后发现官方不支持我的Radeon 780M核显（gfx1103）：&lt;/p&gt;
&lt;figure class=&quot;highlight cmd&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span </summary>
      
    
    
    
    <category term="摸鱼" scheme="https://blog.linc.work/categories/%E6%91%B8%E9%B1%BC/"/>
    
    
    <category term="LLM" scheme="https://blog.linc.work/tags/LLM/"/>
    
  </entry>
  
  <entry>
    <title>创建了一个基于Hexo和Vercel的博客！</title>
    <link href="https://blog.linc.work/article/b8b788b0.html"/>
    <id>https://blog.linc.work/article/b8b788b0.html</id>
    <published>2025-01-30T09:45:10.000Z</published>
    <updated>2025-01-31T09:08:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>春节快乐🎉🎉！突发奇想想搞个博客网站，于是就花了15块钱（首年）买下 linc.work 这个域名，通过 Hexo + Redefine主题 + Github + Vercel 搭建了这个网站（另外通过 LeanCloud + Vercel 搞了文章下的 Waline 评论系统）。</p><p><strong>搞个博客网站主要是可以分享点东西，记录点东西</strong>，当然直接原因还是春节无聊搞着玩的。有群友叫我玩玩Hugo，但是我玩过，不会玩，还是Hexo在网上的资料多一点，适合小白操作。博客这玩意不少搞计算机的都有，我不搞显得我不专业（</p><p>博客折腾了两天才搞好。我在我电脑上用VMware装了个Ubuntu 24.04.1，安装nodejs，然后搭建hexo环境，安装Redefine主题，之后用 <code>hexo deploy</code> 把博客的静态页面部署到GitHub上，再通过Vercel把GitHub仓库部署到Vercel上面，最后再把域名解析到Vercel上边就好了。</p><p>几乎三年没玩技术了，直到最近才听说Vercel挺好用，用了一下还真是个好东西。除了部署静态页面，后端也都能部署（比GitHub Pages牛），而且还能免费使用<em><del>（白嫖）</del></em>，确实牛逼。</p><p>（头图pid：115320144）</p>]]></content>
    
    
    <summary type="html">春节快乐🎉🎉！突发奇想想搞个博客网站，于是就花了15块钱上阿里云买了 linc.work 这个域名（首年），通过 Hexo + Redefine主题 + Github + Vercel搭建了这个网站（另外通过 LeanCloud + Vercel 搞了 Waline 评论系统）。</summary>
    
    
    
    <category term="摸鱼" scheme="https://blog.linc.work/categories/%E6%91%B8%E9%B1%BC/"/>
    
    
    <category term="第一篇文章" scheme="https://blog.linc.work/tags/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
</feed>
